/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ActivityZone } from '../model/activityZone';
import { Comment } from '../model/comment';
import { DetailedActivity } from '../model/detailedActivity';
import { Fault } from '../model/fault';
import { Lap } from '../model/lap';
import { SummaryActivity } from '../model/summaryActivity';
import { SummaryAthlete } from '../model/summaryAthlete';
import { UpdatableActivity } from '../model/updatableActivity';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ActivitiesService {

    protected basePath = 'https://www.strava.com/api/v3';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create an Activity
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @param name The name of the activity.
     * @param type Type of activity. For example - Run, Ride etc.
     * @param startDateLocal ISO 8601 formatted date time.
     * @param elapsedTime In seconds.
     * @param description Description of the activity.
     * @param distance In meters.
     * @param trainer Set to 1 to mark as a trainer activity.
     * @param photoIds List of native photo ids to attach to the activity.
     * @param commute Set to 1 to mark as commute.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createActivity(name: string, type: string, startDateLocal: string, elapsedTime: number, description?: string, distance?: number, trainer?: number, photoIds?: string, commute?: number, observe?: 'body', reportProgress?: boolean): Observable<DetailedActivity>;
    public createActivity(name: string, type: string, startDateLocal: string, elapsedTime: number, description?: string, distance?: number, trainer?: number, photoIds?: string, commute?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DetailedActivity>>;
    public createActivity(name: string, type: string, startDateLocal: string, elapsedTime: number, description?: string, distance?: number, trainer?: number, photoIds?: string, commute?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DetailedActivity>>;
    public createActivity(name: string, type: string, startDateLocal: string, elapsedTime: number, description?: string, distance?: number, trainer?: number, photoIds?: string, commute?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createActivity.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling createActivity.');
        }

        if (startDateLocal === null || startDateLocal === undefined) {
            throw new Error('Required parameter startDateLocal was null or undefined when calling createActivity.');
        }

        if (elapsedTime === null || elapsedTime === undefined) {
            throw new Error('Required parameter elapsedTime was null or undefined when calling createActivity.');
        }






        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
            
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) || formParams;
        }
        if (type !== undefined) {
            formParams = formParams.append('type', <any>type) || formParams;
        }
        if (startDateLocal !== undefined) {
            formParams = formParams.append('start_date_local', <any>startDateLocal) || formParams;
        }
        if (elapsedTime !== undefined) {
            formParams = formParams.append('elapsed_time', <any>elapsedTime) || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('description', <any>description) || formParams;
        }
        if (distance !== undefined) {
            formParams = formParams.append('distance', <any>distance) || formParams;
        }
        if (trainer !== undefined) {
            formParams = formParams.append('trainer', <any>trainer) || formParams;
        }
        if (photoIds !== undefined) {
            formParams = formParams.append('photo_ids', <any>photoIds) || formParams;
        }
        if (commute !== undefined) {
            formParams = formParams.append('commute', <any>commute) || formParams;
        }

        return this.httpClient.post<DetailedActivity>(`${this.basePath}/activities`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Activity
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity.
     * @param includeAllEfforts To include all segments efforts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivityById(id: number, includeAllEfforts?: boolean, observe?: 'body', reportProgress?: boolean): Observable<DetailedActivity>;
    public getActivityById(id: number, includeAllEfforts?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DetailedActivity>>;
    public getActivityById(id: number, includeAllEfforts?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DetailedActivity>>;
    public getActivityById(id: number, includeAllEfforts?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getActivityById.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeAllEfforts !== undefined && includeAllEfforts !== null) {
            queryParameters = queryParameters.set('include_all_efforts', <any>includeAllEfforts);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DetailedActivity>(`${this.basePath}/activities/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Activity Comments
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity.
     * @param page Page number.
     * @param perPage Number of items per page. Defaults to 30.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCommentsByActivityId(id: number, page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Comment>>;
    public getCommentsByActivityId(id: number, page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comment>>>;
    public getCommentsByActivityId(id: number, page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comment>>>;
    public getCommentsByActivityId(id: number, page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCommentsByActivityId.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Comment>>(`${this.basePath}/activities/${encodeURIComponent(String(id))}/comments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Activity Kudoers
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity.
     * @param page Page number.
     * @param perPage Number of items per page. Defaults to 30.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKudoersByActivityId(id: number, page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SummaryAthlete>>;
    public getKudoersByActivityId(id: number, page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SummaryAthlete>>>;
    public getKudoersByActivityId(id: number, page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SummaryAthlete>>>;
    public getKudoersByActivityId(id: number, page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getKudoersByActivityId.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SummaryAthlete>>(`${this.basePath}/activities/${encodeURIComponent(String(id))}/kudos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Activity Laps
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLapsByActivityId(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Lap>>;
    public getLapsByActivityId(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Lap>>>;
    public getLapsByActivityId(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Lap>>>;
    public getLapsByActivityId(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLapsByActivityId.');
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Lap>>(`${this.basePath}/activities/${encodeURIComponent(String(id))}/laps`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Athlete Activities
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @param before An epoch timestamp to use for filtering activities that have taken place before a certain time.
     * @param after An epoch timestamp to use for filtering activities that have taken place after a certain time.
     * @param page Page number.
     * @param perPage Number of items per page. Defaults to 30.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SummaryActivity>>;
    public getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SummaryActivity>>>;
    public getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SummaryActivity>>>;
    public getLoggedInAthleteActivities(before?: number, after?: number, page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (before !== undefined && before !== null) {
            queryParameters = queryParameters.set('before', <any>before);
        }
        if (after !== undefined && after !== null) {
            queryParameters = queryParameters.set('after', <any>after);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SummaryActivity>>(`${this.basePath}/athlete/activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Activity Zones
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param id The identifier of the activity.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getZonesByActivityId(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ActivityZone>>;
    public getZonesByActivityId(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ActivityZone>>>;
    public getZonesByActivityId(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ActivityZone>>>;
    public getZonesByActivityId(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getZonesByActivityId.');
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ActivityZone>>(`${this.basePath}/activities/${encodeURIComponent(String(id))}/zones`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Activity
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @param id The identifier of the activity.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateActivityById(id: number, body?: UpdatableActivity, observe?: 'body', reportProgress?: boolean): Observable<DetailedActivity>;
    public updateActivityById(id: number, body?: UpdatableActivity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DetailedActivity>>;
    public updateActivityById(id: number, body?: UpdatableActivity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DetailedActivity>>;
    public updateActivityById(id: number, body?: UpdatableActivity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateActivityById.');
        }


        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DetailedActivity>(`${this.basePath}/activities/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
