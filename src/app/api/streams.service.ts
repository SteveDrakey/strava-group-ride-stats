/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Fault } from '../model/fault';
import { StreamSet } from '../model/streamSet';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StreamsService {

    protected basePath = 'https://www.strava.com/api/v3';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Activity Streams
     * Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
     * @param id The identifier of the activity.
     * @param keys Desired stream types.
     * @param keyByType Must be true.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe?: 'body', reportProgress?: boolean): Observable<StreamSet>;
    public getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamSet>>;
    public getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamSet>>;
    public getActivityStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getActivityStreams.');
        }

        if (keys === null || keys === undefined) {
            throw new Error('Required parameter keys was null or undefined when calling getActivityStreams.');
        }

        if (keyByType === null || keyByType === undefined) {
            throw new Error('Required parameter keyByType was null or undefined when calling getActivityStreams.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (keys) {
            queryParameters = queryParameters.set('keys', keys.join(COLLECTION_FORMATS['csv']));
        }
        if (keyByType !== undefined && keyByType !== null) {
            queryParameters = queryParameters.set('key_by_type', <any>keyByType);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StreamSet>(`${this.basePath}/activities/${encodeURIComponent(String(id))}/streams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Route Streams
     * Returns the given route&#39;s streams. Requires read_all scope for private routes.
     * @param id The identifier of the route.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRouteStreams(id: number, observe?: 'body', reportProgress?: boolean): Observable<StreamSet>;
    public getRouteStreams(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamSet>>;
    public getRouteStreams(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamSet>>;
    public getRouteStreams(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRouteStreams.');
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StreamSet>(`${this.basePath}/routes/${encodeURIComponent(String(id))}/streams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Segment Effort Streams
     * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
     * @param id The identifier of the segment effort.
     * @param keys The types of streams to return.
     * @param keyByType Must be true.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe?: 'body', reportProgress?: boolean): Observable<StreamSet>;
    public getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamSet>>;
    public getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamSet>>;
    public getSegmentEffortStreams(id: number, keys: Array<'time' | 'distance' | 'latlng' | 'altitude' | 'velocity_smooth' | 'heartrate' | 'cadence' | 'watts' | 'temp' | 'moving' | 'grade_smooth'>, keyByType: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSegmentEffortStreams.');
        }

        if (keys === null || keys === undefined) {
            throw new Error('Required parameter keys was null or undefined when calling getSegmentEffortStreams.');
        }

        if (keyByType === null || keyByType === undefined) {
            throw new Error('Required parameter keyByType was null or undefined when calling getSegmentEffortStreams.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (keys) {
            queryParameters = queryParameters.set('keys', keys.join(COLLECTION_FORMATS['csv']));
        }
        if (keyByType !== undefined && keyByType !== null) {
            queryParameters = queryParameters.set('key_by_type', <any>keyByType);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StreamSet>(`${this.basePath}/segment_efforts/${encodeURIComponent(String(id))}/streams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Segment Streams
     * Returns the given segment&#39;s streams. Requires read_all scope for private segments.
     * @param id The identifier of the segment.
     * @param keys The types of streams to return.
     * @param keyByType Must be true.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, observe?: 'body', reportProgress?: boolean): Observable<StreamSet>;
    public getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamSet>>;
    public getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamSet>>;
    public getSegmentStreams(id: number, keys: Array<'distance' | 'latlng' | 'altitude'>, keyByType: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSegmentStreams.');
        }

        if (keys === null || keys === undefined) {
            throw new Error('Required parameter keys was null or undefined when calling getSegmentStreams.');
        }

        if (keyByType === null || keyByType === undefined) {
            throw new Error('Required parameter keyByType was null or undefined when calling getSegmentStreams.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (keys) {
            queryParameters = queryParameters.set('keys', keys.join(COLLECTION_FORMATS['csv']));
        }
        if (keyByType !== undefined && keyByType !== null) {
            queryParameters = queryParameters.set('key_by_type', <any>keyByType);
        }

        let headers = this.defaultHeaders;

        // authentication (strava_oauth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StreamSet>(`${this.basePath}/segments/${encodeURIComponent(String(id))}/streams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
