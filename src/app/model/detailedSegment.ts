/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { LatLng } from './latLng';
import { PolylineMap } from './polylineMap';
import { SummarySegment } from './summarySegment';
import { SummarySegmentEffort } from './summarySegmentEffort';


export interface DetailedSegment { 
    /**
     * The unique identifier of this segment
     */
    id?: number;
    /**
     * The name of this segment
     */
    name?: string;
    activityType?: DetailedSegment.ActivityTypeEnum;
    /**
     * The segment's distance, in meters
     */
    distance?: number;
    /**
     * The segment's average grade, in percents
     */
    averageGrade?: number;
    /**
     * The segments's maximum grade, in percents
     */
    maximumGrade?: number;
    /**
     * The segments's highest elevation, in meters
     */
    elevationHigh?: number;
    /**
     * The segments's lowest elevation, in meters
     */
    elevationLow?: number;
    startLatlng?: LatLng;
    endLatlng?: LatLng;
    /**
     * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category.
     */
    climbCategory?: number;
    /**
     * The segments's city.
     */
    city?: string;
    /**
     * The segments's state or geographical region.
     */
    state?: string;
    /**
     * The segment's country.
     */
    country?: string;
    /**
     * Whether this segment is private.
     */
    _private?: boolean;
    athletePrEffort?: SummarySegmentEffort;
    /**
     * The time at which the segment was created.
     */
    createdAt?: Date;
    /**
     * The time at which the segment was last updated.
     */
    updatedAt?: Date;
    /**
     * The segment's total elevation gain.
     */
    totalElevationGain?: number;
    map?: PolylineMap;
    /**
     * The total number of efforts for this segment
     */
    effortCount?: number;
    /**
     * The number of unique athletes who have an effort for this segment
     */
    athleteCount?: number;
    /**
     * Whether this segment is considered hazardous
     */
    hazardous?: boolean;
    /**
     * The number of stars for this segment
     */
    starCount?: number;
}
export namespace DetailedSegment {
    export type ActivityTypeEnum = 'Ride' | 'Run';
    export const ActivityTypeEnum = {
        Ride: 'Ride' as ActivityTypeEnum,
        Run: 'Run' as ActivityTypeEnum
    };
}
